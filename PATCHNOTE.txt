PROJET_AI_ROBOT_RACING_V0: 
.Fonctionnalités présentes
-> Création de l'Environnement(PyGame):
    * Possibilité de tracer le circuit sur lequel l'Agent doit Apprendre à atteindre la ligne d'arrivé le plus rapidement
    * Utilisation du calcul de distance de Levenshtein pour détection des limite du circuit par l'Agent(Simulation du capteur ultrason HC-SR04 IRL)
-> Création de l'Agent:
    * L'Agent peut prendre 3 Actions: Rotation Gauche(45°), Rotation Droite(45°), Avancer


.Fonctionnalités à Développer
-> Définir la méthode de Représentation des états de l'Environnement pertinent à la fois pour l'Apprentissage sur Soft et Utilisation sur Raspberry Pi(Robot IRL)
    * Définir les données à utiliser pour Identifier un état de l'Environnement
-> Définir la Méthode d'Apprentissage de l'Agent(Reinforcement Learning, Genetic Algorithm)
-> Intégrer la Fenêtre PyGame dans une Interface Graphique(GTK car Raspberry Pi)

-----------------------------------------------------------------------------------

PROJET_AI_ROBOT_RACING_V0.1: 
.Fonctionnalités présentes
-> Création de l'Environnement(PyGame):
    * Possibilité de tracer le circuit sur lequel l'Agent doit Apprendre à atteindre la ligne d'arrivé le plus rapidement
    * Utilisation du calcul de distance de Levenshtein pour détection des limite du circuit par l'Agent(Simulation du capteur ultrason HC-SR04 IRL)
-> Création de l'Agent:
    * L'Agent peut prendre 3 Actions: Rotation Gauche(45°), Rotation Droite(45°), Avancer
    + Fix problème de HitBox de l'Agent lors de la Rotation
    + Fix Problème de calcul de la ligne entre 2 points(quand très peu d'écart axe X et beaucoup d'écart axe Y)
-> Création de l'Algorithme Génétique(Vérification de Fonctionnement à faire):
    + Génotype= Stratégie de l'Agent => Liste de 100 chiffres entre 0 et 2(0= DROITE | 1= GAUCHE | 2= AVANCER)

.Fonctionnalités à Développer
-> Vérifier le Fonctionnement de l'Algorithme Génétique
-> Intégrer la Fenêtre PyGame dans une Interface Graphique(GTK car Raspberry Pi)
-> Intégrer un système d'évaluation parallèles des Agents(Utilisations de Threads, 1 par Agents) pour affichage de tous les Agents en même temps lors de l'exécution de la Stratégie 

-----------------------------------------------------------------------------------

PROJET_AI_ROBOT_RACING_V0.2: 
.Fonctionnalités présentes
-> Création de l'Environnement(PyGame):
    * Possibilité de tracer le circuit sur lequel l'Agent doit Apprendre à atteindre la ligne d'arrivé le plus rapidement
    * Utilisation du calcul de distance de Levenshtein pour détection des limite du circuit par l'Agent(Simulation du capteur ultrason HC-SR04 IRL)
-> Création de l'Agent:
    * L'Agent peut prendre 3 Actions: Rotation Gauche(45°), Rotation Droite(45°), Avancer
    * Fix problème de HitBox de l'Agent lors de la Rotation
    * Fix Problème de calcul de la ligne entre 2 points(quand très peu d'écart axe X et beaucoup d'écart axe Y)
-> Création de l'Algorithme Génétique(Vérification de Fonctionnement à faire):
    * Génotype= Stratégie de l'Agent => Liste de 100 chiffres entre 0 et 2(0= DROITE | 1= GAUCHE | 2= AVANCER)
    * Vérification du Fonctionnement de l'Algorithme Génétique
    + Intégrer un système d'évaluation parallèles des Agents(Utilisations de Threads, 1 par Agents) pour affichage de tous les Agents en même temps lors de l'exécution de la Stratégie 

.Fonctionnalités à Développer
-> Adapter les valeur de récompense pour faire converger la population de l'algorithme 
-> Intégrer la Fenêtre PyGame dans une Interface Graphique(GTK car Raspberry Pi)

-----------------------------------------------------------------------------------

PROJET_AI_ROBOT_RACING_V0.3: 
.Fonctionnalités présentes
-> Création de l'Environnement: ==> MIGRATION VERS PYTHON ARCADE
    * Possibilité de tracer le circuit sur lequel l'Agent doit Apprendre à atteindre la ligne d'arrivé le plus rapidement
    * Utilisation du calcul de distance de Levenshtein pour détection des collisions Circuit <--> Agent(Simulation du capteur ultrason HC-SR04 IRL)
-> Création de l'Agent:
    * L'Agent peut prendre 3 Actions: Rotation Gauche(45°), Rotation Droite(45°), Avancer
    * Hitbox directement gérée par la librairie Arcade
-> Création de l'Algorithme Génétique(Vérification de Fonctionnement à faire):
    * Génotype= Stratégie de l'Agent => Liste de 100 chiffres entre 0 et 2(0= DROITE | 1= GAUCHE | 2= AVANCER)
    * Vérification du Fonctionnement de l'Algorithme Génétique
    * Evaluation "Simultanées" des Agents
    + Test OK sur une Génération


.Fonctionnalités à Développer
-> Tester le Programme à plus grande échelle (sur plusieurs générations)
-> Adapter les valeur de récompense pour faire converger la population de l'algorithme 
-> Ajouter une GUI à l'application Python Arcade ou Intégrer l'Environnement dans une application GTK

-----------------------------------------------------------------------------------

PROJET_AI_ROBOT_RACING_V0.4: 
.Fonctionnalités présentes
-> Création de l'Environnement: ==> RETOUR SUR PYGAME
    * Possibilité de tracer le circuit sur lequel l'Agent doit Apprendre à atteindre la ligne d'arrivé le plus rapidement
    + Utilisation du calcul de distance de Levenshtein pour placer les murs entre 2 points --> SpriteList

    * L'Agent peut prendre 3 Actions: Rotation Gauche(45°), Rotation Droite(45°), Avancer
    + Passage sur une liste de Sprite pour les Agents --> Simplifie la gestion des collisions(Murs <-> Agents)
-> Création de l'Algorithme Génétique(Vérification de Fonctionnement à faire):
    * Génotype= Stratégie de l'Agent => Liste de 100 chiffres entre 0 et 2(0= DROITE | 1= GAUCHE | 2= AVANCER)
    + Evaluation "Simultanées" des Agents --> Suppression des threads pour l'évaluation des Agents car utilisation de SpriteList
    + Algorithme Génétique fonctionnel
-> Création d'un HUD pour configurer l'Algorithme Evolutionnaire
    + Text Entry pour la taille de la population et le Max nfe
    + Bouton pour lancer l'Algorithme Evolutionnaire
    + Bouton pour envoyer la Stratégie Optimale de l'Agent en MQTT vers le Robot


.Fonctionnalités à Développer
-> Adapter les valeur de récompense pour faire converger la population de l'algorithme 
-> Dev côté NodeMCU Arduino
-----------------------------------------------------------------------------------